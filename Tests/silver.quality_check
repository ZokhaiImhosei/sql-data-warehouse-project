==================================================================================================
Silver Layer
==================================================================================================
Quality Check
==================================================================================================
Script Purpose:
    This script performs various quality checks for data consistency, accuracy,
    and standardization across the 'silver' schema.It includes checks for:
    - Null or duplicate primary keys.
    - Unwanted spaces in string fields.
    - Data standardization and consistency.
    - Invalid data ranges and orders.
    - Data consistency between related fields.

Usage Notes:
   - Run these checks after data loading Silver Layer..
   - Investigate and resolve any discrepancies found during the checks.
==================================================================================================
*/

-- ===================================================================
--Checking 'silver.crm_cust_info'
-- ===================================================================
-- Check for Nulls or Duplicates in Primary Key
-- Expectation: No ReSULT

SELECT 
cst_id,
COUNT(*)
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL

-- Check for Nulls or Duplicates
-- Expectation: No ReSULT

SELECT 
*
FROM (
SELECT
*, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM silver.crm_cust_info
)t WHERE flag_last = 1 

--- double check for duplicates  

SELECT 
*
FROM (
SELECT
*, 
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM silver.crm_cust_info
)t WHERE flag_last = 1 AND cst_id = 29466


-- Data Standardization & Consistency 
SELECT DISTINCT cst_marital_status
FROM silver.crm_cust_info

-- Data Standardization & Consistency
SELECT DISTINCT cst_gndr
FROM silver.crm_cust_info

-- Check for unwanted spaces
SELECT  cst_firstname
FROM silver.crm_cust_info;

-- Filter : If the original value is not equal to the same value after trimming it means there are spaces 
-- Expectation: No Result
SELECT  cst_firstname
FROM silver.crm_cust_info
WHERE cst_firstname!= TRIM(cst_firstname);


-- ===================================================================
--Checking 'silver.crm_prd_info'
-- ===================================================================
-- Check for unwanted spaces
-- Expectation : No Result
SELECT prd_nm
FROM silver.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

-- Check for Nulls or Negative Numbers
-- Expectation: No ReSULT
SELECT prd_cost
FROM silver.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL;

-- Data Standardization & Consistency
SELECT DISTINCT prd_line
FROM silver.crm_prd_info;

-- Check for Invalid Date Orders
SELECT *
FROM silver.crm_prd_info
WHERE prd_end_dt < prd_start_dt;

-- ===================================================================
--Checking 'silver.crm_sales_details'
-- ===================================================================

/* checking forinvalid date orders (  the order date must always be earlier than the 
shipping date or due date*/

SELECT 
*
FROM silver.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR sls_order_dt > sls_due_dt;

-- Checking if there is any null
-- Checking if we have negative numbers or 0
-- Result: No Result

SELECT DISTINCT
sls_sales,
sls_quantity,
sls_price
FROM silver.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price -- Chceking the calculation 
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL -- Checking if there is any null
OR sls_sales  <= 0 or sls_quantity <= 0 or sls_price <= 0 -- Checking if we have negative numbers or 0
ORDER BY sls_sales,sls_quantity, sls_price;



-- ===================================================================
--Checking 'silver.erp_cust_az12'
-- ===================================================================

-- checking for a customer id
SELECT
cid,
bdate,
gen
FROM silver.erp_cust_az12
WHERE cid LIKE 'NASAW00011000';--- Result : Shows good quality


-- Identify Out-of-Range Dates


SELECT DISTINCT
bdate
FROM silver.erp_cust_az12

-- Check for very old customers
-- Result: old customers but nothing to be done 

SELECT DISTINCT
bdate
FROM silver.erp_cust_az12
WHERE bdate < '1924-01-01'

SELECT DISTINCT
bdate
FROM silver.erp_cust_az12 
WHERE bdate < '1924-01-01' OR bdate > GETDATE()        -- Checking for birthdays in the future--RESULT shows the dates are invalid and are in the future


--DATA Standardization & Consistency

SELECT DISTINCT gen
FROM silver.erp_cust_az12;

-- ===================================================================
--Checking 'silver.erp_loc_a101'
-- ===================================================================

-- Data Transformation

-- To verify if it works
SELECT
REPLACE(cid, '-', '') cid,
cntry
FROM silver.erp_loc_a101 WHERE REPLACE(cid, '-', '') NOT IN
(SELECT cst_key FROM silver.crm_cust_info);

--Data Standardization & Consistency
SELECT DISTINCT cntry
FROM silver.erp_loc_a101
ORDER BY cntry;


-- ===================================================================
--Checking 'silver.erp_px_cat_g1v2'
-- ===================================================================

-- Check for unwanted spaces
-- Result: No result

SELECT * FROM silver.erp_px_cat_g1v2
WHERE cat != TRIM(cat) OR subcat != TRIM(subcat) OR maintenance != TRIM(maintenance);

-- Data Standardization & Consistency

SELECT DISTINCT 
cat
FROM silver.erp_px_cat_g1v2;

SELECT DISTINCT 
subcat
FROM silver.erp_px_cat_g1v2;

SELECT DISTINCT 
maintenance
FROM silver.erp_px_cat_g1v2;


